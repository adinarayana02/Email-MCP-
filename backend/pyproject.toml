[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-communication-assistant-backend"
version = "1.0.0"
description = "AI-Powered Communication Assistant for Email Management"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AI Communication Assistant Team", email = "support@aicommunication.com"}
]
maintainers = [
    {name = "AI Communication Assistant Team", email = "support@aicommunication.com"}
]
keywords = ["ai", "email", "communication", "support", "automation", "fastapi", "openai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Communications :: Email",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.23",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    "python-dotenv>=1.0.0",
    "openai>=1.3.7",
    "transformers>=4.36.2",
    "torch>=2.1.1",
    "scikit-learn>=1.3.2",
    "textblob>=0.17.1",
    "pandas>=2.1.4",
    "numpy>=1.25.2",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.2",
    "python-dateutil>=2.8.2",
    "schedule>=1.2.0",
    "fastapi-cors>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
]

[project.optional-dependencies]
dev = [
    "black>=23.11.0",
    "flake8>=6.1.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "ipython>=8.18.1",
    "ipdb>=0.13.13",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "pre-commit>=3.5.0",
    "bandit>=1.7.5",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "click>=8.1.7",
    "rich>=13.7.0",
    "typer>=0.9.0",
]
prod = [
    "gunicorn>=21.2.0",
    "uvloop>=0.19.0; sys_platform != 'win32'",
]

[project.urls]
Homepage = "https://github.com/your-org/ai-communication-assistant"
Documentation = "https://ai-communication-assistant.readthedocs.io/"
Repository = "https://github.com/your-org/ai-communication-assistant"
"Bug Tracker" = "https://github.com/your-org/ai-communication-assistant/issues"

[project.scripts]
ai-communication-assistant = "app.main:main"

[tool.setuptools]
packages = ["app"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
